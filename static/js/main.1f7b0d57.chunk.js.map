{"version":3,"sources":["components/context/csv-context.js","components/utils/SideDrawer.js","components/utils/Header.js","components/ml/utils.js","components/utils/CsvReader.js","components/utils/CsvTable.js","components/utils/Overview.js","ML/utils.js","ML/linreg.js","components/ml/LinearRegression.js","components/decisiontree/utils.js","components/decisiontree/DecisionTree.js","App.js","index.js"],"names":["csvContext","createContext","csv","fetchCsv","useStyles","makeStyles","theme","root","display","button","margin","spacing","drawer","breakpoints","up","width","flexShrink","toolbar","mixins","drawerPaper","paddingTop","SideDrawer","props","history","useHistory","classes","useTheme","pushLink","link","push","handleDrawerToggle","List","ListItem","onClick","ListItemText","primary","Divider","Typography","style","fontSize","fontWeight","color","ListSubheader","component","className","aria-label","Hidden","lgUp","Drawer","container","variant","anchor","direction","open","mobileOpen","onClose","paper","ModalProps","keepMounted","mdDown","appBar","zIndex","menuButton","marginRight","content","flexGrow","title","Header","useState","setMobileOpen","CssBaseline","Toolbar","IconButton","edge","marginTop","children","ReadCSV","url","delimiter","tfcore","tfdata","hasHeader","SetDifference","a","b","filter","x","includes","RemoveNode","node","nodeV","document","getElementById","remove","Zip","map","e","i","DrawChart","surface","y","preds","series_names","series","length","data","values","tfvis","scatterplot","CsvReader","useContext","onDrop","accepted","rejected","links","preview","Paper","padding","accept","multiple","CsvTable","columns","setColumns","setData","useEffect","columnNames","toArray","Fetch","options","filterType","responsive","textAlign","Overview","Grid","item","md","xs","NormalizeValRaw","max","min","value","tf","std","sub","div","NormalizeVar","val","pred","ScaleBackValRaw","mul","add","ScaleBackValWithTensor","ScaleBackVal","InputDimSize","tensor","shape","RootMeanSquareError","yTrue","yPred","meanSquaredError","DisposeValue","dispose","DisposeValues","vals","ExtractInformation","raw","normalize","colName","SplitIntoInputAndLabel","labelCol","allCols","x_raw","y_raw","kv","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","Math","CreateModel","outs","inputs","l1","l2","learningRate","regularizer","l1l2","model","dense","units","inputShape","kernelRegularizer","compile","loss","optimizer","sgd","metrics","Fit","xTrain","yTrain","OnEpochEndCallBack","_","epochs","batchSize","validationSplit","TensorDimSize","logs","fit","shuffle","callbacks","onEpochEnd","epoch","log","rms_loss","val_rms_loss","val_loss","Predict","args","predict","PredictWithScaling","predT","scaledT","console","array","prediction","PredictDataset","preds_list","preds_raw","Promise","all","predsT","x_valsT","x_vals","y_valsT","y_vals","flexDirection","alignItems","formControl","selectEmpty","form","marginLeft","submit","GetDataFromCSV","rowIdx","predCol","Utils","Object","keys","key","join","PredictValues","valuesT","valuesNormT","valuesNorm","LinearRegressionApply","Perform","summary","modelSummary","name","tab","LinearRegression","error","setError","setColumnNames","ycolumn","setYcolumn","predInput","setPredInput","setPrediction","performPred","setPerformedPred","LoadColumnNames","Alert","severity","enableReinitialize","initialValues","xColumns","selectedColumn","validate","errors","onSubmit","setSubmitting","xCols","Set","submitFormHandler","touched","handleChange","handleBlur","handleSubmit","isSubmitting","setFieldValue","backgroundColor","column","index","FormControlLabel","control","Checkbox","checked","onChange","event","target","newArray","col","label","TextField","id","select","fullWidth","MenuItem","FormHelperText","type","onBlur","Button","disabled","String","split","dt","DecisionTree","builder","this","buildDecisionTree","trainingSet","minItemsCount","categoryAttr","entropyThrehold","maxTreeDepth","ignoredAttributes","category","mostFrequentValue","initialEntropy","entropy","alreadyChecked","bestSplit","gain","attr","pivot","predicateName","attrPredPivot","predicate","predicates","currSplit","matchEntropy","match","notMatchEntropy","notMatch","newEntropy","currGain","attribute","matchSubTree","notMatchSubTree","matchedCount","notMatchedCount","arrayToHashSet","RandomForest","treesNumber","trees","items","trainingSets","t","forest","tree","buildRandomForest","hashSet","countUniqueValues","counter","p","mostFrequentCount","prototype","result","predictRandomForest","exports","minWidth","descDiv","background","borderDiv","marginBottom","borderBottom","dTree","setDTree","config","setConfig","details","predictionForm","setPredictionForm","dT","current","innerHTML","cols","slice","lastItem","reqCols","n","forEach","useRef","ignoreColumn","changeDetails","treeToHtml","Fragment","FormControl","Select","displayEmpty","inputProps","decisionTree","err","noValidate","autoComplete","startIcon","decisionTreePrediction","ref","window","scrollTo","offsetTop","gutterBottom","createMuiTheme","customTheme","App","setCsv","useCallback","routes","path","exact","to","ThemeProvider","Provider","ReactDOM","render"],"mappings":"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","file":"static/js/main.1f7b0d57.chunk.js","sourcesContent":["  import { createContext } from 'react';\n\nexport const csvContext = createContext({\n    csv: null,\n    fetchCsv: (csv) => {}\n});","import React from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport List from '@material-ui/core/List';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\n\nconst drawerWidth = 250;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  drawer: {\n    [theme.breakpoints.up('lg')]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n  },\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: drawerWidth,\n    [theme.breakpoints.up('lg')]: {\n      paddingTop: \"64px\",\n    },\n  },  \n}));\n\nconst SideDrawer = props => {\n    let history = useHistory();\n    const classes = useStyles();\n    const theme = useTheme();\n\n    const pushLink = link => {\n      history.push(link);\n      props.handleDrawerToggle();\n    }\n\n    const drawer = (\n        <div>\n          <List>\n          <ListItem button onClick={() => {pushLink('/overview')}}>\n                <ListItemText primary=\"Upload Dataset\" />\n              </ListItem>\n              \n          </List>\n          <Divider />\n            <ListItem classes={{root: classes.root}} button>\n                <Typography style={{ fontSize: '20px', fontWeight: '500', color: 'DarkBlue' }}>\n                    Algorithms\n                </Typography>\n              </ListItem>\n          <Divider />\n          \n          <List>\n          <ListSubheader component=\"div\">\n            REGRESSION\n          </ListSubheader>  \n          <ListItem button onClick={() => {pushLink('/linreg')}}>\n                <ListItemText primary=\"Linear Regression\" />\n              </ListItem>\n              \n          </List>\n          <Divider />\n          <List>\n          <ListSubheader component=\"div\">\n            CLASSIFICATION\n          </ListSubheader>\n              <ListItem button onClick={() => {pushLink('/decision-tree')}}>\n                <ListItemText primary=\"Decision Tree\" />\n              </ListItem>\n              \n          </List>\n          <Divider />\n          <Divider />\n          \n\n        </div>\n      );\n\n    return (\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\n        <Hidden lgUp>\n          <Drawer\n            container={props.container}\n            variant=\"temporary\"\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={props.mobileOpen}\n            onClose={props.handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              keepMounted: true, \n            }}\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n        <Hidden mdDown>\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            variant=\"permanent\"\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav> \n  );\n}\n\nexport default SideDrawer;","import React, { useState } from 'react';\n\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport SideDrawer from './SideDrawer';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Toolbar from '@material-ui/core/Toolbar';\n//import Typography from '@material-ui/core/Typography';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\n//import logo from './logo.png';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up('lg')]: {\n      display: 'none',\n    },\n  },\n  content: {\n    flexGrow: 1,\n  },\n  toolbar: theme.mixins.toolbar,\n    title: {\n    flexGrow: 1,\n  },\n}));\n\nconst Header = props => {\n  const { container } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  const [mobileOpen, setMobileOpen] = useState(false);\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n       {/* <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n          >\n            <MenuIcon />\n          </IconButton>\n          </Toolbar>\n          </AppBar> */}\n          {/*\n          <img src={logo} height=\"30\" width=\"30\" alt=\"logo\" />\n          <Typography variant=\"h6\" className={classes.title}>\n            &nbsp;Kamekazi\n          </Typography>\n        </Toolbar>\n      </AppBar> */}\n      <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n          >\n            <MenuIcon />\n          </IconButton>\n          </Toolbar>\n        <SideDrawer \n          theme={theme}\n          container={container}\n          handleDrawerToggle={handleDrawerToggle}\n          mobileOpen={mobileOpen}\n          setMobileOpen={setMobileOpen}\n        />\n      <main className={classes.content}>\n        <div style={{ marginTop: \"70px\" }}>\n            {props.children}\n        </div>\n      </main>\n    </div>\n  );\n}\n\nHeader.propTypes = {\n  container: PropTypes.any,\n};\n\nexport default Header;","import * as tfdata from \"@tensorflow/tfjs-data\";\nimport * as tfcore from \"@tensorflow/tfjs-core\";\nimport * as tfvis from \"@tensorflow/tfjs-vis\";\n\nexport function ReadCSV(url, delimiter) {\n    return tfcore.tidy(() => {\n        const data = tfdata.csv(url, {\n            hasHeader: true,\n            delimiter: delimiter\n        });\n        return data;\n    })\n}\nexport function SetDifference(a, b) {\n    return a.filter(x => !b.includes(x));\n}\n\nexport function RemoveNode(node) {\n    const nodeV = document.getElementById(node);\n    if (nodeV != null)\n        nodeV.remove();\n}\n\nexport function CreateTensor(data, labels) {\n    const arr = [];\n    return tfcore.tidy(() => {\n        for (const label of labels)\n            arr.push(data[label]);\n        return tfcore.tensor(arr);\n    });\n}\n\nexport function Zip(a, b) {\n    const c = a.map(function (e, i) {\n        return [e, b[i]];\n    });\n    return c;\n}\nexport async function DrawChart(surface, x, y, preds) {\n    const series_names = [];\n    const series = [];\n    for (let i = 0; i < x[0].length; ++i) {\n        series_names.push(\"X \" + i + \" Y\");\n        series.push(Zip(x, y).map(([x, y]) => { return { x: x[i], y }; }));\n        series_names.push(\"X \" + i + \" PRED\");\n        series.push(Zip(x, preds).map(([x, y]) => { return { x: x[i], y }; }));\n    }\n    const data = { values: series, series: series_names }\n    await tfvis.render.scatterplot(surface, data);\n}\n","import React, { useContext, useState } from 'react';\nimport MagicDropzone from 'react-magic-dropzone';\nimport { csvContext } from '../context/csv-context';\nimport Paper from '@material-ui/core/Paper';\nimport { ReadCSV } from '../ml/utils';\n\nconst CsvReader = () => {\n    const { fetchCsv } = useContext(csvContext);\n    // eslint-disable-next-line\n    const [delimiter, setDelimiter] = useState(',');\n    const onDrop = async (accepted, rejected, links) => {\n        if (accepted && accepted.length > 0) {\n            const url = accepted[0].preview;\n            const data = ReadCSV(url, delimiter);\n            fetchCsv(data);\n        }\n    }\n\n    return (\n        <Paper style={{ margin: '10px', padding: '10px' }}>\n            <MagicDropzone className=\"dropzone\" accept=\".csv\" multiple={false} onDrop={onDrop}>\n                <div className=\"center-div-wrap\">\n                    <div style={{ display: 'block' , padding: '80px' }}>\n                        <p>Drag and Drop csv file</p>\n                    </div>\n                </div>\n            </MagicDropzone>\n        </Paper>\n    )\n}\n\nexport default CsvReader;","import React, { useState, useEffect, useContext } from 'react';\nimport { csvContext } from '../context/csv-context';\nimport MUIDataTable from \"mui-datatables\";\n\nconst CsvTable = () => {\n    const { csv } = useContext(csvContext);\n    const [columns, setColumns] = useState([])\n    const [data, setData] = useState([]);\n\n    useEffect( () => {\n        if (csv) {\n            async function Fetch() {\n                setColumns(await csv.columnNames());\n                setData(await csv.toArray())\n            }\n            Fetch();\n        }\n    }, [csv])\n\n    const options = {\n        filterType: \"dropdown\",\n        responsive: \"scroll\"\n    };\n\n    return (\n        <div className=\"csv-table\">\n            {csv ? (\n                <MUIDataTable\n                    title={\"Data Table\"}\n                    data={data}\n                    columns={columns}\n                    options={\n\n                        options}\n                />\n            ) : (\n                    <div style={{ textAlign: 'center' }}>\n                        <h3>Dataset not Found</h3>\n                    </div>\n                )}\n\n        </div>\n    );\n}\n\nexport default CsvTable;","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport CsvReader from './CsvReader';\nimport CsvTable from './CsvTable';\n\nconst Overview = () => {\n    return (\n        <div>\n            <Grid container>\n                <Grid item md={6} xs={12}>\n                    <CsvReader />\n                    <CsvTable />\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Overview; ","import * as tf from \"@tensorflow/tfjs\";\n\nexport function Normalize(tensor) {\n    return tf.tidy(() => {\n        const max = tensor.max();\n        const min = tensor.min();\n        const normalized = NormalizeValRaw(max, min, tensor);\n        return { max, min, value: normalized };\n    });\n}\nexport function NormalizeValRaw(max, min, value) { \n    return tf.tidy(() => {\n        const std = max.sub(min)\n        const num = value.sub(min)\n        const normalized = num.div(std)\n        return normalized;\n    });\n}\nexport function NormalizeVar(val, pred) {\n    return tf.tidy(() => { return NormalizeValRaw(val.max, val.min, pred); })\n}\nexport function ScaleBackValRaw(max, min, pred) {\n    return tf.tidy(() => {\n        const std = max.sub(min)\n        const num = pred.mul(std)\n        const scaled = num.add(min)\n        return scaled;\n    });\n}\nexport function ScaleBackValWithTensor(val, pred) {\n    return tf.tidy(() => {\n        return ScaleBackValRaw(val.max, val.min, tf.tensor(pred))\n    });\n}\nexport function ScaleBackVal(val, pred) {\n    return tf.tidy(() => {\n        return ScaleBackValRaw(val.max, val.min, pred);\n    });\n}\n\nexport function InputDimSize(tensor) {\n    return tf.tidy(() => tensor.shape[1])\n}\nexport function RootMeanSquareError(yTrue, yPred) {\n    return tf.tidy(() => {\n        // Scale the the first column (0-1 shape indicator) of `yTrue` in order\n        // to ensure balanced contributions to the final loss value\n        // from shape and bounding-box predictions.\n        return tf.sqrt(tf.metrics.meanSquaredError(yTrue, yPred));\n    });\n}\n\nexport function DisposeValue(val) {\n    val.value.dispose();\n    val.max.dispose();\n    val.min.dispose();\n}\nexport function DisposeValues(...vals) {\n    for (const val of vals)\n        DisposeValue(val);\n}\nexport async function ExtractSelectedLabelsFromCSV(csv, selectedCols = []) {\n    const data = await csv.toArray();\n    return ExtractSelectedLabels(data, selectedCols);\n}\nexport function ExtractSelectedLabels(data, selectedCols = []) {\n    if (selectedCols.length === 0)\n        return data;\n    const results = [];\n    for (const kv of data) {\n        const result = {};\n        for (const colName in kv) {\n            if (!selectedCols.includes(colName))\n                continue;\n            const value = kv[colName];\n            result[colName] = value;\n        }\n        results.push(result);\n    }\n    return results;\n}\nexport async function ConvertCSVToRawArrays(csv, labelCol, allCols = [], normalize = false) {\n    const data = await csv.toArray();\n    const [xT, yT] = SplitIntoInputAndLabel(data, labelCol, allCols, normalize);\n\n    const x = await xT.value.array();\n    const y = await yT.value.array();\n\n    DisposeValues(xT, yT);\n    return [x, y];\n}\nfunction ExtractInformation(raw, data, normalize = true) {\n    return tf.tidy(() => {\n        const value = {\n            value: [],\n            max: [],\n            min: []\n        };\n        for (let i = 0; i < data.length; ++i)\n            value.value.push([]);\n\n        for (const colName in raw) {\n            const max = raw[colName].max;\n            const min = raw[colName].min;\n            value.max.push(max);\n            value.min.push(min);\n            for (let i = 0; i < raw[colName].value.length; ++i) {\n                if (normalize)\n                    raw[colName].value[i] = (raw[colName].value[i] - min) / (max - min)\n                value.value[i].push(raw[colName].value[i]);\n            }\n        }\n        value.max = tf.tensor(value.max);\n        value.min = tf.tensor(value.min);\n        value.value = tf.tensor(value.value);\n        return value;\n    });\n}\nexport function ArrayRemoveColumn(array, remIdx = []) {\n    return array.map((arr) => {\n        return arr.filter((_, idx) => !remIdx.includes(idx));\n    });\n};\nexport function SplitIntoInputAndLabel(data, labelCol, allCols = [], normalize = true) {\n    return tf.tidy(() => {\n        let x_raw = {};\n        let y_raw = {};\n\n        for (const kv of data)\n            for (const colName in kv) {\n                if (allCols.length !== 0 && !allCols.includes(colName)) {\n                    continue;\n                }\n                const value = kv[colName];\n                if (labelCol.includes(colName)) {\n                    if (y_raw[colName] == null)\n                        y_raw[colName] = { value: [], min: Number.MAX_SAFE_INTEGER, max: Number.MIN_SAFE_INTEGER }\n                    y_raw[colName].max = Math.max(y_raw[colName].max, value);\n                    y_raw[colName].min = Math.min(y_raw[colName].min, value);\n                    y_raw[colName].value.push(value);\n                } else {\n                    if (x_raw[colName] == null)\n                        x_raw[colName] = { value: [], min: Number.MAX_SAFE_INTEGER, max: Number.MIN_SAFE_INTEGER }\n                    x_raw[colName].value.push(value);\n                    x_raw[colName].max = Math.max(x_raw[colName].max, value);\n                    x_raw[colName].min = Math.min(x_raw[colName].min, value);\n                }\n            }\n        const x = ExtractInformation(x_raw, data, normalize)\n        const y = ExtractInformation(y_raw, data, normalize)\n        return [x, y];\n    });\n}","import * as tf from \"@tensorflow/tfjs\";\nimport { InputDimSize as TensorDimSize, RootMeanSquareError, ScaleBackVal, ScaleBackValWithTensor } from \"./utils\";\n\nexport function CreateModel(outs, inputs, l1, l2, learningRate) {\n    return tf.tidy(() => {\n        const regularizer = tf.regularizers.l1l2({\n            l1: l1,\n            l2: l2\n        });\n        const model = tf.sequential();\n        model.add(\n            tf.layers.dense({\n                units: outs, \n                inputShape: [inputs],\n                kernelRegularizer: regularizer\n            })\n        );\n        model.compile({\n            loss: RootMeanSquareError,\n            optimizer: tf.train.sgd(learningRate), \n            metrics: [RootMeanSquareError]\n        });\n        return model;\n    });\n}\nexport async function Fit(\n    xTrain, yTrain,\n    OnEpochEndCallBack = async (_) => { },\n    l1 = 0.0, l2 = 0.0,\n    epochs = 100, batchSize = 16, validationSplit = 10,\n    learningRate = 0.01) {\n\n    const model = CreateModel(TensorDimSize(yTrain), TensorDimSize(xTrain), l1, l2, learningRate);\n    const logs = [];\n\n    await model.fit(xTrain, yTrain, {\n        batchSize: batchSize,\n        epochs: epochs,\n        shuffle: true,\n        validationSplit: (validationSplit / 100), // In Percentage\n        callbacks: {\n            onEpochEnd: async (epoch, log) => {\n                logs.push({\n                    rms_loss: log.loss,\n                    val_rms_loss: log.val_loss,\n                    epoch: epoch\n                });\n                // Perform Action with All Train Logs\n                await OnEpochEndCallBack(logs);\n            }\n        }\n    });\n    return model;\n}\n\nexport function Predict(model, value, args = () => { }) {\n    return tf.tidy(() => {\n        return model.predict(tf.tensor([value]), args);\n    });\n}\nexport function Evaluate(model, x, y, args = () => { }) {\n    return tf.tidy(() => {\n        return model.evaluate(x, y, args);\n    });\n}\nexport async function PredictWithScaling(model, x, y) {\n    const predT = Predict(model, x);\n    const scaledT = ScaleBackVal(y, predT);\n    console.log(await predT.array(), await scaledT.array());\n    predT.dispose();\n    const prediction = (await scaledT.array())[0];\n    scaledT.dispose();\n    return prediction;\n}\nexport async function PredictDataset(model, x, y) {\n    let preds_list = [];\n    for (const val of await x.value.array()) {\n        const pred = Predict(model, val);\n        preds_list.push(pred);\n    }\n    let preds_raw = preds_list.map(pred => pred.array());\n    preds_raw = await Promise.all(preds_raw);\n    preds_raw = preds_raw.map(pred => pred[0]);\n\n    for (const pred_dispose of preds_list)\n        pred_dispose.dispose();\n    const predsT = ScaleBackValWithTensor(y, preds_raw);\n    const preds = await predsT.array();\n\n    const x_valsT = ScaleBackVal(x, x.value);\n    const x_vals = await x_valsT.array();\n\n    const y_valsT = ScaleBackVal(y, y.value);\n    const y_vals = await y_valsT.array();\n\n    predsT.dispose();\n    x_valsT.dispose();\n    y_valsT.dispose();\n    console.log(preds, x_vals, y_vals);\n    return [preds, x_vals, y_vals]\n}\n","import React, { useState, useEffect, useContext } from 'react';\nimport { Formik } from 'formik';\nimport Button from '@material-ui/core/Button';\nimport Alert from '@material-ui/lab/Alert';\nimport { csvContext } from '../context/csv-context';\nimport { makeStyles } from '@material-ui/core/styles';\nimport * as Utils from \"./utils\";\nimport { SplitIntoInputAndLabel, NormalizeVar, DisposeValues } from '../../ML/utils';\nimport * as LinearRegressionApply from \"../../ML/linreg\";\nimport * as tfvis from \"@tensorflow/tfjs-vis\";\nimport * as tf from \"@tensorflow/tfjs-core\";\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        margin: theme.spacing(8, 4),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        width: '80%',\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n    form: {\n        width: '90%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n        marginLeft: '20px',\n    },\n    submit: {\n        width: '100px',\n    },\n}));\n\nlet model = null;\nconst vals = { x: null, y: null };\n//const lossContainer = { name: 'show.loss', tab: 'Loss' };\n\n// async function PredictSingleValue(model, data, xCols, x, y) {\n//     const val_pred = Utils.CreateTensor(data, xCols);\n//     const pred = await val_pred.data();\n//     const val_pred_norm = NormalizeVar(x, val_pred);\n//     const prediction = LinearRegressionApply.Predict(model, await val_pred_norm.array());\n//     const resT = ScaleBackVal(y, prediction);\n//     const res = (await resT.array())[0];\n//     val_pred.dispose();\n//     val_pred_norm.dispose();\n//     resT.dispose();\n//     prediction.dispose();\n//     return [pred, res];\n// }\n\nasync function GetDataFromCSV(csv, rowIdx, columns, predCol) {\n    const data = (await csv.toArray())[rowIdx];\n    const columnNames = Utils.SetDifference(columns, [predCol]);\n    console.log(columnNames, predCol);\n    const values = Object.keys(data).filter(key => columnNames.includes(key)).map(val => data[val]);\n    return values.join(',');\n}\n\nasync function PredictValues(values) {\n    const valuesT = tf.tensor(values);\n    const valuesNormT = NormalizeVar(vals.x, valuesT)\n    valuesT.dispose();\n    const valuesNorm = await valuesNormT.array();\n    valuesNormT.dispose();\n    const pred = await LinearRegressionApply.PredictWithScaling(model, valuesNorm, vals.y);\n    console.log(pred);\n    return pred;\n}\n\nasync function Perform(csv, labelCol, columnNames, l1, l2, epochs, batchSize, validationSplit, learningRate) {\n    if (vals.x != null && vals.y != null && model != null) {\n        DisposeValues(vals.x, vals.y);\n        console.log(\"33\");\n        model.dispose();\n        model = null;\n    }\n    const data = await csv.toArray();\n    console.log(labelCol);\n    Utils.RemoveNode(\"tfjs-visor-container\");\n   tfvis.visor().open();\n    const [x, y] = SplitIntoInputAndLabel(data, labelCol, columnNames);\n    model = await LinearRegressionApply.Fit(x.value, y.value, async (logs) => {\n        //await tfvis.show.history(lossContainer, logs, [\"rms_loss\", \"val_rms_loss\"]);\n    }, l1, l2, epochs, batchSize, validationSplit, learningRate);\n    model.summary();\n    await tfvis.show.modelSummary({ name: 'Model', tab: 'Model' }, model);\n\n    const [preds, x_vals, y_vals] = await LinearRegressionApply.PredictDataset(model, x, y);\n    await Utils.DrawChart({ name: 'Line chart', tab: 'Plot' }, x_vals, y_vals, preds);\n    vals.x = x;\n    vals.y = y;\n\n    console.log(\"Final Memory Usage\", tf.memory());\n}\n\nexport default function LinearRegression() {\n    const classes = useStyles();\n    const [error, setError] = useState('')\n    const { csv } = useContext(csvContext);\n    const [columnNames, setColumnNames] = useState([]);\n    const [ycolumn, setYcolumn] = useState();\n    const [predInput, setPredInput] = useState(\"9,7.5,3.5\");\n    const [prediction, setPrediction] = useState(\"\");\n    const [performPred, setPerformedPred] = useState(false);\n    useEffect(() => {\n        if (csv == null)\n            return;\n        async function LoadColumnNames() {\n            const columns = await csv.columnNames();\n            setColumnNames(columns);\n            setYcolumn(columns[columns.length - 1]);\n        }\n        LoadColumnNames();\n    }, [csv, setColumnNames]);\n\n    return (\n        <Grid container>\n            \n            <Grid item md={6} xs={12}>\n                {csv && ycolumn ? (\n                    <div style={{ padding: '10px' }}>\n                        {error && (\n                            <Alert onClose={() => setError('')} severity=\"error\">\n                                {error}\n                            </Alert>\n                        )}\n                        <Formik\n                            enableReinitialize\n                            initialValues={{\n                                xColumns: columnNames,\n                                selectedColumn: ycolumn,\n                                l1: 0.0,\n                                l2: 0.0,\n                                batchSize: 16,\n                                validationSplit: 10,\n                                learningRate: 0.01,\n                                epochs: 50,\n                            }}\n                            validate={values => {\n                                const errors = {};\n                                if (!values.selectedColumn) {\n                                    errors.selectedColumn = 'Required';\n                                }\n                                if (values.l1 == null) {\n                                    errors.l1 = 'Required';\n                                }\n                                if (values.l1 < 0) {\n                                    errors.l1 = 'Invalid L1 value';\n                                }\n                                if (values.l2 == null) {\n                                    errors.l2 = 'Required';\n                                }\n                                if (values.l2 < 0) {\n                                    errors.l2 = 'Invalid L2 value';\n                                }\n                                if (!values.batchSize) {\n                                    errors.batchSize = 'Required';\n                                }\n                                if (!values.validationSplit) {\n                                    errors.validationSplit = 'Required';\n                                }\n                                if (values.validationSplit < 5) {\n                                    errors.validationSplit = 'Invalid Validation Split';\n                                }\n                                if (!values.learningRate) {\n                                    errors.learningRate = 'Required';\n                                }\n                                if (values.learningRate < 0 || values.learningRate > 1) {\n                                    errors.learningRate = 'Invalid Learning Rate';\n                                }\n                                if (!values.epochs) {\n                                    errors.epochs = 'Required';\n                                }\n                                if (values.epochs < 1) {\n                                    errors.epochs = 'Invalid Number of Epochs';\n                                }\n\n                                return errors;\n                            }}\n                            onSubmit={(values, { setSubmitting }) => {\n                                const submitFormHandler = async values => {\n                                    let xCols = [...values.xColumns, values.selectedColumn]\n                                    xCols = [...new Set(xCols)]\n                                    console.log(xCols)\n                                    try {\n                                        setPerformedPred(false);\n                                        await Perform(\n                                            csv,\n                                            [values.selectedColumn],\n                                            xCols,\n                                            values.l1,\n                                            values.l2,\n                                            values.epochs,\n                                            values.batchSize,\n                                            values.validationSplit,\n                                            values.learningRate)\n                                        setPerformedPred(true);\n                                        setPredInput(await GetDataFromCSV(csv, 0, xCols, ycolumn));\n                                    } catch (err) {\n                                        console.error(err);\n                                        setError('Error occored in Training');\n                                        setPerformedPred(false);\n                                    }\n                                }\n                                submitFormHandler(values);\n                                setSubmitting(false)\n                            }}\n                        >{({\n                            values,\n                            errors,\n                            touched,\n                            handleChange,\n                            handleBlur,\n                            handleSubmit,\n                            isSubmitting,\n                            setFieldValue,\n                        }) => (\n                                <form className={classes.form} onSubmit={handleSubmit}>\n                                    <Grid container spacing={1}>\n                                       <h1 style={{color:\"Black\"}}>Linear Regression</h1>\n                                        <Grid item xs={12}>\n                                            <Paper style={{ backgroundColor: 'offwhite', padding: '20px' }}>\n                                                Select the attributes \n                                        </Paper>\n                                            <Grid container spacing={1}>\n                                                {columnNames.map((column, index) =>\n                                                    <Grid item xs={4} key={index}>\n                                                        {column !== values.selectedColumn && (\n                                                            <FormControlLabel\n                                                                control={<Checkbox\n                                                                    checked={values.xColumns.includes(column)}\n                                                                    color=\"default\"\n                                                                    name={column}\n                                                                    onChange={(event) => {\n                                                                        let array = values.xColumns;\n                                                                        if (array.includes(event.target.name)) {\n                                                                            const newArray = array.filter((col) => col !== event.target.name);\n                                                                            setFieldValue('xColumns', newArray, false)\n                                                                        } else {\n                                                                            array.push(event.target.name)\n                                                                            setFieldValue('xColumns', array, false)\n                                                                        }\n                                                                    }}\n                                                                />}\n                                                                label={column}\n                                                            />\n                                                        )}\n                                                    </Grid>\n                                                )}\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item xs={12}>\n                                            <TextField id=\"select\"\n                                                label=\"Y Attribute\" select\n                                                fullWidth\n                                                value={values.selectedColumn}\n                                                name=\"selectedColumn\"\n                                                onChange={handleChange}\n                                                variant=\"filled\"\n                                            >\n                                                {columnNames.map((column, index) =>\n                                                    <MenuItem key={index} value={column}>{column}</MenuItem>\n                                                )}\n                                            </TextField>\n                                            <FormHelperText>Select a column</FormHelperText>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <TextField\n                                                variant=\"filled\"\n                                                label=\"L1\"\n                                                name=\"l1\"\n                                                type=\"number\"\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                value={values.l1}\n\n                                            />\n                                            <div style={{ margin: \"10px\", color: \"red\" }}>\n                                                {errors.l1 && touched.l1 && errors.l1}\n                                            </div>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <TextField\n                                                variant=\"filled\"\n                                                label=\"L2\"\n                                                name=\"l2\"\n                                                type=\"number\"\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                value={values.l2}\n                                            />\n                                            <div style={{ margin: \"10px\", color: \"red\" }}>\n                                                {errors.l2 && touched.l2 && errors.l2}\n                                            </div>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <TextField\n                                                variant=\"filled\"\n                                                label=\"Batch Size\"\n                                                name=\"batchSize\"\n                                                type=\"number\"\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                value={values.batchSize}\n                                            />\n                                            <div style={{ margin: \"10px\", color: \"red\" }}>\n                                                {errors.batchSize && touched.batchSize && errors.batchSize}\n                                            </div>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <TextField\n                                                variant=\"filled\"\n                                                label=\"Validation Split\"\n                                                name=\"validationSplit\"\n                                                type=\"number\"\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                value={values.validationSplit}\n                                            />\n                                            <div style={{ margin: \"10px\", color: \"red\" }}>\n                                                {errors.validationSplit && touched.validationSplit && errors.validationSplit}\n                                            </div>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <TextField\n                                                variant=\"filled\"\n                                                label=\"Learning Rate\"\n                                                name=\"learningRate\"\n                                                type=\"number\"\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                value={values.learningRate}\n                                            />\n                                            <div style={{ margin: \"10px\", color: \"red\" }}>\n                                                {errors.learningRate && touched.learningRate && errors.learningRate}\n                                            </div>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <TextField\n                                                variant=\"filled\"\n                                                label=\"Epochs\"\n                                                name=\"epochs\"\n                                                type=\"number\"\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                value={values.epochs}\n                                            />\n                                            <div style={{ margin: \"10px\", color: \"red\" }}>\n                                                {errors.epochs && touched.epochs && errors.epochs}\n                                            </div>\n                                        </Grid>\n                                    </Grid>\n                                    <div style={{ margin: '20px', textAlign: 'center' }}>\n                                        <Button\n                                            style={{ width: '50%' }}\n                                            type=\"submit\"\n                                            fullWidth\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            className={classes.submit}\n                                            disabled={isSubmitting}\n                                        >\n                                            Start\n                                    </Button>\n                                    </div>\n                                </form>\n                            )}\n                        </Formik>\n                        {\n                            performPred &&\n                            <>\n                                <TextField\n                                    variant=\"filled\"\n                                    label=\"Predictor\"\n                                    name=\"Predictor\"\n                                    value={predInput}\n                                    onChange={(_) => setPredInput(_.target.value)}\n                                />\n                                <div style={{ margin: '10px', textAlign: 'center' }}>\n                                 <Button\n                                            onClick={() => tfvis.visor().open()}\n                                            style={{ width: '10%' }}\n                                            fullWidth\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            \n                                        >Show Charts</Button>\n                                        </div>\n                               \n                                <div style={{ margin: '10px', textAlign: 'center' }}>\n                                <Button\n                                           onClick={async () => { setPrediction(''); setPrediction(await PredictValues(String(predInput).split(',').map(value => Number(value)))); }}\n                                            style={{ width: '10%' }}\n                                            fullWidth\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            \n                                        >PREDICT</Button>\n                                        </div>\n                               \n                            </>\n                        }\n                        {\n                            performPred && prediction !== \"\" &&\n                            <Alert onClose={() => { setPrediction('') }} severity=\"success\">\n                                The predicted value is {prediction}\n                            </Alert>\n                        }\n                    </div>\n                ) : (\n                        <div style={{ paddingTop: '50px', textAlign: 'center' }}>\n                           Upload dataset\n                        </div>\n                    )}\n            </Grid>\n\n        </Grid >\n    )\n}\n\n","let dt = (function () {\n          \n    /**\n     * Creates an instance of DecisionTree\n     *\n     * @constructor\n     * @param builder - contains training set and\n     *                  some configuration parameters\n     */\n    function DecisionTree(builder) {        \n        this.root = buildDecisionTree({\n            trainingSet: builder.trainingSet,\n            ignoredAttributes: arrayToHashSet(builder.ignoredAttributes),\n            categoryAttr: builder.categoryAttr || 'category',\n            minItemsCount: builder.minItemsCount || 1,\n            entropyThrehold: builder.entropyThrehold || 0.01,\n            maxTreeDepth: builder.maxTreeDepth || 70\n        });\n    }\n          \n    DecisionTree.prototype.predict = function (item) {\n        return predict(this.root, item);\n    }\n\n    /**\n     * Creates an instance of RandomForest\n     * with specific number of trees\n     *\n     * @constructor\n     * @param builder - contains training set and some\n     *                  configuration parameters for\n     *                  building decision trees\n     */\n    function RandomForest(builder, treesNumber) {\n        this.trees = buildRandomForest(builder, treesNumber);\n    }\n          \n    RandomForest.prototype.predict = function (item) {\n        return predictRandomForest(this.trees, item);\n    }\n    \n    /**\n     * Transforming array to object with such attributes \n     * as elements of array (afterwards it can be used as HashSet)\n     */\n    function arrayToHashSet(array) {\n        let hashSet = {};\n        if (array) {\n            for(let i in array) {\n                let attr = array[i];\n                hashSet[attr] = true;\n            }\n        }\n        return hashSet;\n    }\n    \n    /**\n     * Calculating how many objects have the same \n     * values of specific attribute.\n     *\n     * @param items - array of objects\n     *\n     * @param attr  - letiable with name of attribute, \n     *                which embedded in each object\n     */\n    function countUniqueValues(items, attr) {\n        let counter = {};\n\n        // detecting different values of attribute\n        for (let i = items.length - 1; i >= 0; i--) {\n            // items[i][attr] - value of attribute\n            counter[items[i][attr]] = 0;\n        }\n          \n        // counting number of occurrences of each of values\n        // of attribute\n        for (let i = items.length - 1; i >= 0; i--) {\n            counter[items[i][attr]] += 1;\n        }\n\n        return counter;\n    }\n    \n    /**\n     * Calculating entropy of array of objects \n     * by specific attribute.\n     *\n     * @param items - array of objects\n     *\n     * @param attr  - letiable with name of attribute, \n     *                which embedded in each object\n     */\n    function entropy(items, attr) {\n        // counting number of occurrences of each of values\n        // of attribute\n        let counter = countUniqueValues(items, attr);\n\n        let entropy = 0;\n        let p;\n        for (let i in counter) {\n            p = counter[i] / items.length;\n            entropy += -p * Math.log(p);\n        }\n\n        return entropy;\n    }\n          \n    /**\n     * Splitting array of objects by value of specific attribute, \n     * using specific predicate and pivot.\n     *\n     * Items which matched by predicate will be copied to \n     * the new array called 'match', and the rest of the items \n     * will be copied to array with name 'notMatch'\n     *\n     * @param items - array of objects\n     *\n     * @param attr  - letiable with name of attribute,\n     *                which embedded in each object\n     *\n     * @param predicate - function(x, y) \n     *                    which returns 'true' or 'false'\n     *\n     * @param pivot - used as the second argument when \n     *                calling predicate function:\n     *                e.g. predicate(item[attr], pivot)\n     */\n    function split(items, attr, predicate, pivot) {\n        let match = [];\n        let notMatch = [];\n\n        let item,\n            attrValue;\n          \n        for (let i = items.length - 1; i >= 0; i--) {\n            item = items[i];\n            attrValue = item[attr];\n\n            if (predicate(attrValue, pivot)) {\n                match.push(item);\n            } else {\n                notMatch.push(item);\n            }\n        };\n\n        return {\n            match: match,\n            notMatch: notMatch\n        };\n    }\n\n    /**\n     * Finding value of specific attribute which is most frequent\n     * in given array of objects.\n     *\n     * @param items - array of objects\n     *\n     * @param attr  - letiable with name of attribute, \n     *                which embedded in each object\n     */\n    function mostFrequentValue(items, attr) {\n        // counting number of occurrences of each of values\n        // of attribute\n        let counter = countUniqueValues(items, attr);\n\n        let mostFrequentCount = 0;\n        let mostFrequentValue;\n\n        for (let value in counter) {\n            if (counter[value] > mostFrequentCount) {\n                mostFrequentCount = counter[value];\n                mostFrequentValue = value;\n            }\n        };\n\n        return mostFrequentValue;\n    }\n          \n    let predicates = {\n        '===': function (a, b) { return a === b },\n        '>=': function (a, b) { return a >= b }\n    };\n\n    /**\n     * Function for building decision tree\n     */\n    function buildDecisionTree(builder) {\n\n        let trainingSet = builder.trainingSet;\n        let minItemsCount = builder.minItemsCount;\n        let categoryAttr = builder.categoryAttr;\n        let entropyThrehold = builder.entropyThrehold;\n        let maxTreeDepth = builder.maxTreeDepth;\n        let ignoredAttributes = builder.ignoredAttributes;\n\n        if ((maxTreeDepth === 0) || (trainingSet.length <= minItemsCount)) {\n            // restriction by maximal depth of tree\n            // or size of training set is to small\n            // so we have to terminate process of building tree\n            return {\n                category: mostFrequentValue(trainingSet, categoryAttr)\n            };\n        }\n\n        let initialEntropy = entropy(trainingSet, categoryAttr);\n\n        if (initialEntropy <= entropyThrehold) {\n            // entropy of training set too small\n            // (it means that training set is almost homogeneous),\n            // so we have to terminate process of building tree\n            return {\n                category: mostFrequentValue(trainingSet, categoryAttr)\n            };\n        }\n\n        // used as hash-set for avoiding the checking of split by rules\n        // with the same 'attribute-predicate-pivot' more than once\n        let alreadyChecked = {};\n          \n        // this letiable expected to contain rule, which splits training set\n        // into subsets with smaller values of entropy (produces informational gain)\n        let bestSplit = {gain: 0};\n\n        for (let i = trainingSet.length - 1; i >= 0; i--) {\n            let item = trainingSet[i];\n\n            // iterating over all attributes of item\n            for (let attr in item) {\n                if ((attr === categoryAttr) || ignoredAttributes[attr]) {\n                    continue;\n                }\n\n                // let the value of current attribute be the pivot\n                let pivot = item[attr];\n\n                // pick the predicate\n                // depending on the type of the attribute value\n                let predicateName;\n                if (typeof pivot === 'number') {\n                    predicateName = '>=';\n                } else {\n                    // there is no sense to compare non-numeric attributes\n                    // so we will check only equality of such attributes\n                    predicateName = '===';\n                }\n\n                let attrPredPivot = attr + predicateName + pivot;\n                if (alreadyChecked[attrPredPivot]) {\n                    // skip such pairs of 'attribute-predicate-pivot',\n                    // which been already checked\n                    continue;\n                }\n                alreadyChecked[attrPredPivot] = true;\n\n                let predicate = predicates[predicateName];\n          \n                // splitting training set by given 'attribute-predicate-value'\n                let currSplit = split(trainingSet, attr, predicate, pivot);\n\n                // calculating entropy of subsets\n                let matchEntropy = entropy(currSplit.match, categoryAttr);\n                let notMatchEntropy = entropy(currSplit.notMatch, categoryAttr);\n\n                // calculating informational gain\n                let newEntropy = 0;\n                newEntropy += matchEntropy * currSplit.match.length;\n                newEntropy += notMatchEntropy * currSplit.notMatch.length;\n                newEntropy /= trainingSet.length;\n                let currGain = initialEntropy - newEntropy;\n\n                if (currGain > bestSplit.gain) {\n                    // remember pairs 'attribute-predicate-value'\n                    // which provides informational gain\n                    bestSplit = currSplit;\n                    bestSplit.predicateName = predicateName;\n                    bestSplit.predicate = predicate;\n                    bestSplit.attribute = attr;\n                    bestSplit.pivot = pivot;\n                    bestSplit.gain = currGain;\n                }\n            }\n        }\n\n        if (!bestSplit.gain) {\n            // can't find optimal split\n            return { category: mostFrequentValue(trainingSet, categoryAttr) };\n        }\n\n        // building subtrees\n          \n        builder.maxTreeDepth = maxTreeDepth - 1;\n\n        builder.trainingSet = bestSplit.match;\n        let matchSubTree = buildDecisionTree(builder);\n\n        builder.trainingSet = bestSplit.notMatch;\n        let notMatchSubTree = buildDecisionTree(builder);\n\n        return {\n            attribute: bestSplit.attribute,\n            predicate: bestSplit.predicate,\n            predicateName: bestSplit.predicateName,\n            pivot: bestSplit.pivot,\n            match: matchSubTree,\n            notMatch: notMatchSubTree,\n            matchedCount: bestSplit.match.length,\n            notMatchedCount: bestSplit.notMatch.length\n        };\n    }\n\n    /**\n     * Classifying item, using decision tree\n     */\n    function predict(tree, item) {\n        let attr,\n            value,\n            predicate,\n            pivot;\n        \n        // Traversing tree from the root to leaf\n        while(true) {\n          \n            if (tree.category) {\n                // only leafs contains predicted category\n                return tree.category;\n            }\n\n            attr = tree.attribute;\n            value = item[attr];\n\n            predicate = tree.predicate;\n            pivot = tree.pivot;\n\n            // move to one of subtrees\n            if (predicate(value, pivot)) {\n                tree = tree.match;\n            } else {\n                tree = tree.notMatch;\n            }\n        }\n    }\n\n    /**\n     * Building array of decision trees\n     */\n    function buildRandomForest(builder, treesNumber) {\n        let items = builder.trainingSet;\n          \n        // creating training sets for each tree\n        let trainingSets = [];\n        for (let t = 0; t < treesNumber; t++) {\n            trainingSets[t] = [];\n        }\n        for (let i = items.length - 1; i >= 0 ; i--) {\n          // assigning items to training sets of each tree\n          // using 'round-robin' strategy\n          let correspondingTree = i % treesNumber;\n          trainingSets[correspondingTree].push(items[i]);\n        }\n\n        // building decision trees\n        let forest = [];\n        for (let t = 0; t < treesNumber; t++) {\n            builder.trainingSet = trainingSets[t];\n\n            let tree = new DecisionTree(builder);\n            forest.push(tree);\n        }\n        return forest;\n    }\n\n    /**\n     * Each of decision tree classifying item\n     * ('voting' that item corresponds to some class).\n     *\n     * This function returns hash, which contains \n     * all classifying results, and number of votes \n     * which were given for each of classifying results\n     */\n    function predictRandomForest(forest, item) {\n        let result = {};\n        for (let i in forest) {\n            let tree = forest[i];\n            let prediction = tree.predict(item);\n            result[prediction] = result[prediction] ? result[prediction] + 1 : 1;\n        }\n        return result;\n    }\n\n    let exports = {};\n    exports.DecisionTree = DecisionTree;\n    exports.RandomForest = RandomForest;\n    return exports;\n})();\n\nexport default dt;","import React, { useState, useEffect, useRef, useContext } from 'react';\nimport dt from './utils';\nimport { csvContext } from '../context/csv-context';\nimport './DecisionTree.css';\nimport Alert from '@material-ui/lab/Alert';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TextField from '@material-ui/core/TextField';\nimport FunctionsIcon from '@material-ui/icons/Functions';\nimport AccountTreeIcon from '@material-ui/icons/AccountTree';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n          margin: theme.spacing(1),\n          width: '25ch',\n        },\n    },\n    button: {\n        margin: theme.spacing(1),\n        width: '100%',\n    },\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n    descDiv: {\n        background: '#505050', \n        width: '100%', \n        padding: '15px',\n        fontSize: '14px',\n    },\n    borderDiv: {\n        marginBottom: '20px', \n        padding: '10px', \n        borderBottom: '1px solid white',\n    }\n}));\n\nconst DecisionTree = () => {\n    const classes = useStyles();\n    const { csv } = useContext(csvContext);\n    const [columns, setColumns] = useState([])\n    const [dTree, setDTree] = useState();\n    const [config, setConfig] = useState({\n        trainingSet: null, \n        categoryAttr: '', \n        ignoredAttributes: [] \n    })\n\n    const [predictionForm, setPredictionForm] = useState({\n        columns: [],\n        details: {}\n    });\n\n    const scrollToRef = (ref) => window.scrollTo(0, ref.current.offsetTop) \n    const [error, setError] = useState('');\n    const [prediction, setPrediction] = useState('')\n\n    useEffect( () => {\n        if (csv) {\n            async function Fetch() {\n                setDTree(null);\n                dT.current.innerHTML = null\n                let cols = await csv.columnNames()\n                let [lastItem] = cols.slice(-1)\n                setColumns(cols);\n                setConfig({\n                    trainingSet: await csv.toArray(),\n                    categoryAttr: lastItem,\n                    ignoredAttributes: [] \n                })\n            }\n            Fetch();\n        }\n    }, [csv]) \n\n    useEffect(() => {\n        if (dTree) {\n            let reqCols = columns.filter(n => !config.ignoredAttributes.includes(n))\n            reqCols = reqCols.filter(n => n !== config.categoryAttr)\n            let details = {};\n            reqCols.forEach(col => {\n                details[col] = '';\n            });\n            setPredictionForm({\n                columns: reqCols,\n                details: details\n            })\n        }\n    }, [columns, config, dTree])\n\n    const dT = useRef();\n\n    const ignoreColumn = (event) => {\n        let array = config.ignoredAttributes;\n        if (array.includes(event.target.name)) {\n            const newArray = array.filter((col) => col !== event.target.name);\n            setConfig({\n                ...config,\n                ignoredAttributes: newArray\n            })\n        } else {\n            array.push(event.target.name)\n            setConfig({\n                ...config,\n                ignoredAttributes: array\n            })\n        }\n    }\n\n    const chooseCategoryAttr = (event) => {\n        setConfig({\n            ...config,\n            categoryAttr: event.target.value\n        })\n    }\n\n    const changeDetails = (event) => {\n        let details = predictionForm.details\n        details[event.target.name] = event.target.value\n        setPredictionForm({\n            ...predictionForm,\n            details: details\n        })\n    }\n\n    // Recursive (DFS) function for displaying inner structure of decision tree\n    const treeToHtml = (tree) => {\n        // only leafs containing category\n        if (tree.category) {\n            return  ['<ul>',\n                        '<li>',\n                            '<button>',\n                                '<b>', tree.category, '</b>',\n                            '</button>',\n                        '</li>',\n                    '</ul>'].join('');\n        }\n        \n        return  ['<ul>',\n                    '<li>',\n                        '<button>',\n                            '<b>', tree.attribute, ' ', tree.predicateName, ' ', tree.pivot, ' ?</b>',\n                        '</button>',\n                        '<ul>',\n                            '<li>',\n                                '<button>yes</button>',\n                                treeToHtml(tree.match),\n                            '</li>',\n                            '<li>', \n                                '<button>no</button>',\n                                treeToHtml(tree.notMatch),\n                            '</li>',\n                        '</ul>',\n                    '</li>',\n                '</ul>'].join('');\n    }\n\n    const generateTree = () => {\n        try {\n            // Building Decision Tree\n            let decisionTree = new dt.DecisionTree(config);\n            setDTree(decisionTree)\n            // Displaying Decision Tree\n            dT.current.innerHTML = treeToHtml(decisionTree.root);\n        } catch (err) {\n            setError(err)\n        }\n    }\n\n    const predictTree = () => {\n        // Building Decision Tree\n        let decisionTree = new dt.DecisionTree(config);\n\n        // Testing Decision Tree and Random Forest\n        let details = predictionForm.details;\n\n        let decisionTreePrediction = decisionTree.predict(details);\n        setPrediction(decisionTreePrediction)\n        // Displaying Decision Tree\n        dT.current.innerHTML = treeToHtml(decisionTree.root);\n    }\n    \n    return (\n        <Grid container>\n            \n            <Grid item md={6} xs={12}>\n            \n                {csv ? (\n                        <div style={{ padding: '10px' }}>\n                            {error && (\n                                <Alert onClose={() => setError('')} severity=\"error\">\n                                    {error}\n                                </Alert>\n                            )}\n                            \n                            <h1 style={{color:\"Black\"}}>Decision Tree</h1>\n                            {columns && (\n                                <React.Fragment>  \n                                    <div className={classes.borderDiv}>\n                                        <Paper className={classes.descDiv}>\n                                            Select the column to be predicted\n                                        </Paper>\n                                        <FormControl className={classes.formControl}>\n                                            <Select\n                                                value={config.categoryAttr}\n                                                onChange={chooseCategoryAttr}\n                                                displayEmpty\n                                                className={classes.selectEmpty}\n                                                inputProps={{ 'aria-label': 'Without label' }}\n                                            >\n                                                {columns.map((column, index) => \n                                                    <MenuItem key={index} value={column}>{column}</MenuItem>\n                                                )}\n                                            </Select>\n                                            <FormHelperText>Select a column</FormHelperText>\n                                        </FormControl>\n                                    </div>\n                                    <div className={classes.borderDiv}>\n                                        <Paper className={classes.descDiv}>\n                                            Check the columns to be ignored\n                                        </Paper>\n                                        {columns.map((column, index) => \n                                            <div key={index}>\n                                                {column !== config.categoryAttr && (\n                                                    <FormControlLabel\n                                                        control={<Checkbox \n                                                                    checked={config.ignoredAttributes.includes(column)} \n                                                                    color=\"default\" \n                                                                    name={column}\n                                                                    onChange={ignoreColumn} \n                                                                />}\n                                                        label={column}       \n                                                    />\n                                                )}\n                                            </div>\n                                        )}\n                                    </div>\n                                </React.Fragment>\n                            )}\n\n\n                            <div style={{ textAlign: 'center' }}>\n                                <Button variant=\"contained\" color=\"primary\" onClick={generateTree}>Generate Decision Tree</Button>\n                            </div>\n                            {dTree && (\n                                <div style={{ marginTop: '20px', padding: '10px' }}>\n                                    <Paper className={classes.descDiv}>\n                                        Make a Prediction\n                                    </Paper>\n                                    <form className={classes.root} noValidate autoComplete=\"off\">\n                                        {predictionForm.columns.map((column, index) => \n                                            <TextField \n                                                key={index}  \n                                                label={column} \n                                                name={column}\n                                                value={predictionForm.details.column}\n                                                onChange={changeDetails}\n                                            />\n                                        )}\n                                    </form>\n                                    <Grid style={{ marginBottom: '20px' }} container spacing={4}>\n                                        <Grid item xs={6}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                className={classes.button}\n                                                startIcon={<FunctionsIcon />}\n                                                onClick={predictTree}\n                                            >\n                                                Predict\n                                            </Button>      \n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                className={classes.button}\n                                                startIcon={<AccountTreeIcon />}\n                                                onClick={() => {scrollToRef(dT)}}\n                                            >\n                                                View Tree\n                                            </Button>       \n                                        </Grid>\n                                    </Grid>\n                                </div>\n                            )}\n                            {prediction && (\n                                <Alert onClose={() => {setPrediction('')}} severity=\"success\">\n                                    The predicted value is {prediction}\n                                </Alert>\n                            )}\n                        </div>\n                ) : (\n                        <div style={{ paddingTop: '50px', textAlign: 'center' }}>\n                            Upload dataset \n                        </div>\n                )}\n                \n            </Grid>\n            {dTree && (\n                <Paper style={{ width: '100%', margin: '20px', padding: '20px', textAlign: 'center', backgroundColor: '#000000' }}>\n                    <Typography variant=\"h4\" gutterBottom>\n                        Decision Tree\n                    </Typography>\n                </Paper>\n            )}\n            <div className=\"tree-wrapper\">\n                <div className=\"tree\" ref={dT} />\n            </div>\n        </Grid>\n        \n    );\n}\n\nexport default DecisionTree;\n","import React, { useState, useCallback } from 'react';\nimport { \n  HashRouter as Router, \n  Route, \n  Redirect, \n  Switch \n} from 'react-router-dom';\nimport { ThemeProvider } from '@material-ui/styles';\nimport customTheme from './components/theme/theme.json';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { csvContext } from './components/context/csv-context';\nimport Header from './components/utils/Header';\nimport Overview from './components/utils/Overview';\nimport LinearRegression from './components/ml/LinearRegression';\nimport DecisionTree from './components/decisiontree/DecisionTree';\n\n\n\nconst theme = createMuiTheme(customTheme);\n\nconst App = () => {\n  const [csv, setCsv] = useState();\n\n  const fetchCsv = useCallback((csv) => {\n    setCsv(csv);\n  }, []);\n\n  let routes = (\n      <Switch>\n                <Route path=\"/overview\" exact>\n            <Overview />\n        </Route>\n        <Route path=\"/linreg\" exact>\n          <LinearRegression/>\n        </Route>\n        <Route path=\"/decision-tree\" exact>\n          <DecisionTree />\n        </Route>\n        \n        <Redirect to=\"/overview\" />\n      </Switch>\n    )\n\n  return (\n      <ThemeProvider theme={theme}>\n        <csvContext.Provider\n          value={{\n            csv: csv,\n            fetchCsv: fetchCsv\n          }}\n        >\n          <Router>\n            <Header>\n              {routes}\n            </Header>\n          </Router>\n        </csvContext.Provider>\n      </ThemeProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}